/*
 * BuildRetrievalQueryWindow.java
 *
 * Created on 06-Apr-2012, 22:18:52
 */
package eesa.gui.windows.db;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;

import eesa.db.Database;
import eesa.db.DatabaseCondition;
import eesa.db.DatabaseConnector;
import eesa.db.DatabaseSort;
import eesa.db.DatabaseTable;
import eesa.db.Field;
import eesa.db.Operator;
import eesa.db.QueryObject;
import eesa.db.SelectQuery;
import eesa.gui.lists.db.DatabaseFieldListModel;
import eesa.gui.lists.db.DatabaseSortListModel;
import eesa.gui.lists.db.DatabaseTableListModel;

/**
 * Provides a window to build a sub-query.
 * @author Philip
 */
public class BuildRetrievalQueryWindow extends JFrame implements DatabaseWindow {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    /**
     * 
     */
    private DatabaseTableListModel databaseTableListModel;
    /**
     * 
     */
    private DatabaseFieldListModel databaseFieldListModel;
    /**
     * 
     */
    private DatabaseSortListModel databaseSortListModel;
    /**
     * 
     */
    private DatabaseCondition condition;
    /**
     * 
     */
    private AddDatabaseConditionWindow parent;
    /**
     * 
     */
    private QueryObject data;
    /**
     * 
     */
	private GroupLayout layout;
    
    /**
     * Creates new form BuildRetrievalQueryWindow.
     * @param p parent
     * @param d data  
     */
    public BuildRetrievalQueryWindow(
    		final AddDatabaseConditionWindow p,
    		final QueryObject d) {
        this.parent = p;
        this.data = d;
        databaseTableListModel = new DatabaseTableListModel(this);
        databaseFieldListModel = new DatabaseFieldListModel(this);
        databaseSortListModel = new DatabaseSortListModel(this);        
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
    	createFields();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Build Retrieval Query");

        heading.setFont(new java.awt.Font("Tahoma", 1,
        		eesa.gui.Application.HEADING_FONT_SIZE)); // NOI18N
        heading.setText("Build Retrieval Query");

        dataSourceLabel.setFont(new java.awt.Font("Tahoma", 1,
        		eesa.gui.Application.FONT_SIZE)); // NOI18N
        dataSourceLabel.setText("Data Source:");

        databaseTypeLabel.setText(getDatabaseConnector().toString());

        databaseConnectionLabel.setText(getDatabase().toString());

        dataSourceSeparator.setText("::");

        dataTablesLabel.setText("Data Tables:");

        dataTablesList.setModel(databaseTableListModel);
        jScrollPane1.setViewportView(dataTablesList);

        addDataTableButton.setText("+");
        addDataTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                addDataTableButtonActionPerformed(evt);
            }
        });

        removeDataTableButton.setText("-");
        removeDataTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                removeDataTableButtonActionPerformed(evt);
            }
        });

        dataFieldsLabel.setText("Data Fields");

        addDataFieldButton.setText("+");
        addDataFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                addDataFieldButtonActionPerformed(evt);
            }
        });

        removeDataFieldButton.setText("-");
        removeDataFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                removeDataFieldButtonActionPerformed(evt);
            }
        });

        dataFieldsList.setModel(databaseFieldListModel);
        jScrollPane2.setViewportView(dataFieldsList);

        conditionsLabel.setText("Condition");

        conditionField.setEditable(false);

        setConditionButton.setText("Set");
        setConditionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                setConditionButtonActionPerformed(evt);
            }
        });

        removeConditionButton.setText("Remove");
        removeConditionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                removeConditionButtonActionPerformed(evt);
            }
        });

        sortingLabel.setText("Sorting");

        dataSortsList.setModel(databaseSortListModel);
        jScrollPane4.setViewportView(dataSortsList);

        addSortButton.setText("+");
        addSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                addSortButtonActionPerformed(evt);
            }
        });

        removeSortButton.setText("-");
        removeSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                removeSortButtonActionPerformed(evt);
            }
        });

        buildButton.setText("Build");
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                buildButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");

        buildLayout();

        pack();
    }
    /**
     * 
     */
    private void buildLayout() {
        layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        buildLayoutHorizontal();
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(heading)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(dataSourceLabel)
                    .addComponent(databaseTypeLabel)
                    .addComponent(databaseConnectionLabel)
                    .addComponent(dataSourceSeparator))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(buildButton))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(55, 55, 55)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(dataTablesLabel)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(addDataTableButton)
                            .addGap(3, 3, 3)
                            .addComponent(removeDataTableButton))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(conditionField, GroupLayout.PREFERRED_SIZE,
                                		GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(conditionsLabel))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(setConditionButton)
                                .addComponent(removeConditionButton))))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane4, 0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                            .addGroup(GroupLayout.Alignment.LEADING,
                            		layout.createSequentialGroup()
                                .addComponent(sortingLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addSortButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeSortButton))
                            .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(dataFieldsLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addDataFieldButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeDataFieldButton))
                            .addComponent(jScrollPane2,
                            		GroupLayout.DEFAULT_SIZE, 89,
                            		Short.MAX_VALUE)))
                    .addGap(55, 55, 55)))
        );
	}
    /**
     * 
     */
	private void buildLayoutHorizontal() {
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(
                    		GroupLayout.Alignment.LEADING)
                        .addComponent(heading,
                        		GroupLayout.PREFERRED_SIZE,
                        		182, GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(dataSourceLabel)
                            .addGap(7, 7, 7)
                            .addComponent(databaseTypeLabel)
                            .addGap(6, 6, 6)
                            .addComponent(dataSourceSeparator)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(databaseConnectionLabel)))
                    .addContainerGap(194, Short.MAX_VALUE))
                .addGroup(GroupLayout.Alignment.TRAILING,
                		layout.createSequentialGroup()
                    .addContainerGap(295, Short.MAX_VALUE)
                    .addComponent(buildButton)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(cancelButton)
                    .addContainerGap())
                .addGroup(layout.createParallelGroup(
                		GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(
                        		GroupLayout.Alignment.LEADING)
                            .addComponent(dataTablesLabel)
                            .addComponent(dataFieldsLabel)
                            .addGroup(layout.createParallelGroup(
                            		GroupLayout.Alignment.TRAILING, false)
                                .addComponent(removeDataTableButton, 
                                		GroupLayout.Alignment.LEADING, 0, 0, 
                                		Short.MAX_VALUE)
                                .addComponent(addDataTableButton, 
                                		GroupLayout.Alignment.LEADING, 
                                		GroupLayout.DEFAULT_SIZE, 
                                		GroupLayout.DEFAULT_SIZE,
                                		Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(
                            		GroupLayout.Alignment.TRAILING, false)
                                .addComponent(removeDataFieldButton,
                                		GroupLayout.Alignment.LEADING, 0, 0,
                                		Short.MAX_VALUE)
                                .addComponent(addDataFieldButton,
                                		GroupLayout.Alignment.LEADING,
                                		GroupLayout.DEFAULT_SIZE, 43,
                                		Short.MAX_VALUE)))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(
                        		GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2,
                            		GroupLayout.DEFAULT_SIZE, 91, 
                            		Short.MAX_VALUE)
                            .addComponent(jScrollPane1,
                            		GroupLayout.DEFAULT_SIZE, 91, 
                            		Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(
                        		GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(
                                		GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removeSortButton, 0, 0,
                                    		Short.MAX_VALUE)
                                    .addComponent(sortingLabel)
                                    .addComponent(addSortButton, 0, 0,
                                    		Short.MAX_VALUE)
                                    .addComponent(setConditionButton,
                                    		GroupLayout.DEFAULT_SIZE,
                                    		GroupLayout.DEFAULT_SIZE,
                                    		Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(conditionsLabel,
                                		GroupLayout.DEFAULT_SIZE, 58,
                                		Short.MAX_VALUE)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(
                        		GroupLayout.Alignment.LEADING)
                            .addGroup(GroupLayout.Alignment.TRAILING,
                            		layout.createSequentialGroup()
                                .addPreferredGap(
                                		LayoutStyle.ComponentPlacement.RELATED,
                                		27,
                                		Short.MAX_VALUE)
                                .addComponent(removeConditionButton)
                                .addGap(78, 78, 78))
                            .addComponent(conditionField,
                            		GroupLayout.Alignment.TRAILING,
                            		GroupLayout.DEFAULT_SIZE, 176,
                            		Short.MAX_VALUE)
                            .addComponent(jScrollPane4,
                            		GroupLayout.Alignment.TRAILING,
                            		GroupLayout.PREFERRED_SIZE, 164,
                            		GroupLayout.PREFERRED_SIZE))
                        .addContainerGap()))
            );
	}

	/**
     * 
     */
    private void createFields() {
        heading = new JLabel();
        dataSourceLabel = new JLabel();
        databaseTypeLabel = new JLabel();
        databaseConnectionLabel = new JLabel();
        dataSourceSeparator = new JLabel();
        dataTablesLabel = new JLabel();
        jScrollPane1 = new JScrollPane();
        dataTablesList = new JList<DatabaseTable>();
        addDataTableButton = new JButton();
        removeDataTableButton = new JButton();
        dataFieldsLabel = new JLabel();
        addDataFieldButton = new JButton();
        removeDataFieldButton = new JButton();
        jScrollPane2 = new JScrollPane();
        dataFieldsList = new JList<Field>();
        conditionsLabel = new JLabel();
        conditionField = new JTextField();
        setConditionButton = new JButton();
        removeConditionButton = new JButton();
        sortingLabel = new JLabel();
        jScrollPane4 = new JScrollPane();
        dataSortsList = new JList<DatabaseSort>();
        addSortButton = new JButton();
        removeSortButton = new JButton();
        buildButton = new JButton();
        cancelButton = new JButton();
	}

	/**
     * 
     * @param evt
     */
    private void addDataTableButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        new AddDatabaseTableWindow(this).setVisible(true);
}
    /**
     * 
     * @param evt
     */
    private void removeDataTableButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        databaseTableListModel.removeTable(dataTablesList.getSelectedValue());
}
    /**
     * 
     * @param evt
     */
    private void addDataFieldButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        new AddDatabaseFieldWindow(this).setVisible(true);
}
    /**
     * 
     * @param evt
     */
    private void removeDataFieldButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        databaseFieldListModel.removeField((Field) dataFieldsList.getSelectedValue());
}
    /**
     * 
     * @param evt
     */
    private void setConditionButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        new AddDatabaseConditionWindow(this).setVisible(true);
}
    /**
     * 
     * @param evt
     */
    private void removeConditionButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        this.condition = null;
        this.conditionField.setText("");
}
    /**
     * 
     * @param evt
     */
    private void addSortButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        new AddDatabaseSortWindow(this).setVisible(true);
}
    /**
     * 
     * @param evt
     */
    private void removeSortButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        databaseSortListModel.removeSort((DatabaseSort) dataSortsList.getSelectedValue());
}
    /**
     * 
     * @param evt
     */
    private void buildButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        updateData();
        parent.setQuery(data.getSelectQuery());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * 
     */
    private JButton addDataFieldButton;
    /**
     * 
     */
    private JButton addDataTableButton;
    /**
     * 
     */
    private JButton addSortButton;
    /**
     * 
     */
    private JButton buildButton;
    /**
     * 
     */
    private JButton cancelButton;
    /**
     * 
     */
    private JTextField conditionField;
    /**
     * 
     */
    private JLabel conditionsLabel;
    /**
     * 
     */
    private JLabel dataFieldsLabel;
    /**
     * 
     */
    private JList<Field> dataFieldsList;
    /**
     * 
     */
    private JList<DatabaseSort> dataSortsList;
    /**
     * 
     */
    private JLabel dataSourceLabel;
    /**
     * 
     */
    private JLabel dataSourceSeparator;
    /**
     * 
     */
    private JLabel dataTablesLabel;
    /**
     * 
     */
    private JList<DatabaseTable> dataTablesList;
    /**
     * 
     */
    private JLabel databaseConnectionLabel;
    /**
     * 
     */
    private JLabel databaseTypeLabel;
    /**
     * 
     */
    private JLabel heading;
    /**
     * 
     */
    private JScrollPane jScrollPane1;
    /**
     * 
     */
    private JScrollPane jScrollPane2;
    /**
     * 
     */
    private JScrollPane jScrollPane4;
    /**
     * 
     */
    private JButton removeConditionButton;
    /**
     * 
     */
    private JButton removeDataFieldButton;
    /**
     * 
     */
    private JButton removeDataTableButton;
    /**
     * 
     */
    private JButton removeSortButton;
    /**
     * 
     */
    private JButton setConditionButton;
    /**
     * 
     */
    private JLabel sortingLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * @return
     */
    @Override
	public final Database getDatabase() {
        return data.getDatabase();
    }

    /**
     * 
     * @return
     */
    @Override
	public final DatabaseConnector getDatabaseConnector() {
        return data.getDatabaseConnector();
    }

    /**
     * 
     * @param table
     */
    @Override
	public final void addTable(final DatabaseTable table) {
        databaseTableListModel.addTable(table);
    }

    /**
     * 
     * @return
     */
    @Override
	public final DatabaseTable[] getTables() {
        return databaseTableListModel.getTables();
    }

    /**
     * 
     * @param f
     */
    @Override
	public final void addField(final Field f) {
        databaseFieldListModel.addField(f);
    }

    /**
     * 
     * @return
     */
    @Override
	public final Field[] getFields() {
        return databaseFieldListModel.getFields();
    }

    /**
     * 
     * @return
     */
    @Override
	public final Operator[] getOperators() {
        return data.getDatabase().getOperators();
    }

    /**
     * 
     * @param c condition
     */
    @Override
	public final void setCondition(final DatabaseCondition c) {
        this.condition = c;
        this.conditionField.setText(c.toString());
    }

    @Override
	public final DatabaseCondition getCondition() {
        return condition;
    }

    @Override
	public final void addSort(final DatabaseSort sort) {
        databaseSortListModel.addSort(sort);
    }
    
    @Override
	public final DatabaseSort[] getSorts() {
        return databaseSortListModel.getSorts();
    }

    /**
     * 
     */
    private void updateData() {
        SelectQuery select = data.getDatabase().select();
        select.setTables(getTables());
        select.setFields(getFields());
        select.setCondition(getCondition());
        select.setSorts(getSorts());
        data.setSelectQuery(select);
    }
}
