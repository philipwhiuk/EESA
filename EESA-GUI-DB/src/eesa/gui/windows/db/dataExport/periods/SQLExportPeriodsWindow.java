/*
 * SQLExportPeriodsWindow.java
 *
 * Created on 04-Apr-2012, 20:31:39
 */
package eesa.gui.windows.db.dataExport.periods;

import eesa.db.Database;
import eesa.db.DatabaseConnector;
import eesa.db.DatabaseException;
import eesa.db.DatabaseManager;
import eesa.db.dataExport.SQLPeriodDataExport;
import eesa.gui.windows.dataExport.periods.AbstractExportPeriodsWindow;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 * Allows the user to customize the database connection details.
 * @author Philip
 */
public class SQLExportPeriodsWindow extends AbstractExportPeriodsWindow  {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    /**
     * 
     */
    private final SQLPeriodDataExport data;

    /** Creates new form SQLExportPeriodsWindow.
     * @param data 
     */
    public SQLExportPeriodsWindow(final SQLPeriodDataExport data) {
        this.data = data;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
    	createFields();
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        jLabel1.setText("Database Connection");
        hostLabel.setText("Database Host");
        heading.setFont(new java.awt.Font("Tahoma", 1,
        		eesa.gui.Application.HEADING_FONT_SIZE)); // NOI18N
        heading.setText("Select SQL Database Source");
        typeLabel.setText("Database Type");
        connectionCheck.setText("Test Connection");
        connectionCheck.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                connectionCheckActionPerformed(evt);
            }
        });
        portLabel.setText("Database Port");
        databaseTypeComboBox.setModel(getDatabaseTypes());
        databaseTypeComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(final ItemEvent evt) {
                databaseTypeComboBoxItemStateChanged(evt);
            }
        });
        databaseTypeComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                databaseTypeComboBoxActionPerformed(evt);
            }
        });

        customConnectionCheckBox.setText("Custom Connection");
        customConnectionCheckBox.addItemListener(new ItemListener() {
            public void itemStateChanged(final ItemEvent evt) {
                customConnectionCheckBoxItemStateChanged(evt);
            }
        });
        customConnectionCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                customConnectionCheckBoxActionPerformed(evt);
            }
        });

        databaseConnectionComboBox.setModel(getDefinedDatabaseConnections());
        databaseConnectionComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(final ItemEvent evt) {
                databaseConnectionComboBoxItemStateChanged(evt);
            }
        });

        stepsPanel.setBackground(new java.awt.Color(255, 255, 255));

        stepsTitle.setFont(new java.awt.Font("Tahoma", 1,
        		eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        stepsTitle.setText("Steps");

        step1.setFont(new java.awt.Font("Tahoma", 2,
        		eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step1.setText("1. Select Type");

        step2.setFont(new java.awt.Font("Tahoma", 1,
        		eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step2.setText("2. Select Destination");

        step3.setText("3. Customise Insertion");

        step4.setText("4. Map Data");

        buildStepsPanelLayout();

        backButton2.setText("Back");
        backButton2.setEnabled(false);
        backButton2.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                backButton2ActionPerformed(evt);
            }
        });

        hostField.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                hostFieldActionPerformed(evt);
            }
        });

        finishButton.setText("Finish");
        finishButton.setEnabled(false);
        finishButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        jdbcLabel.setText("JDBC Connection");

        jdbcField.setEditable(false);

        nameLabel.setText("Database Name");

        jdbcCustomiseCheckbox.setText("Custom JDBC URL");
        jdbcCustomiseCheckbox.addItemListener(new ItemListener() {
            public void itemStateChanged(final ItemEvent evt) {
                jdbcCustomiseCheckboxItemStateChanged(evt);
            }
        });
        jdbcCustomiseCheckbox.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                jdbcCustomiseCheckboxActionPerformed(evt);
            }
        });

        passwordLabel.setText("Database Password");

        helpButton.setText("Help");
        helpButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        usernameLabel.setText("Database Username");

        buildLayout();

        pack();
    }
    /**
     * 
     */
    private void buildStepsPanelLayout() {
        GroupLayout stepsPanelLayout = new GroupLayout(stepsPanel);
        stepsPanel.setLayout(stepsPanelLayout);
        stepsPanelLayout.setHorizontalGroup(
            stepsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stepsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(stepsTitle)
                    .addComponent(step2)
                    .addComponent(step3)
                    .addComponent(step1)
                    .addComponent(step4))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        stepsPanelLayout.setVerticalGroup(
            stepsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stepsTitle)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step2)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step3)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step4)
                .addContainerGap(216, Short.MAX_VALUE))
        );
	}

	/**
     * 
     */
    private void buildLayout() {
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(245, Short.MAX_VALUE)
                .addComponent(backButton2)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finishButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(stepsPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(hostLabel)
                            .addComponent(portLabel)
                            .addComponent(passwordLabel)
                            .addComponent(usernameLabel)
                            .addComponent(nameLabel)
                            .addComponent(jdbcLabel))
                        .addGap(eesa.gui.Application.GAP, eesa.gui.Application.GAP, eesa.gui.Application.GAP)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(jdbcField, GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(usernameField, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(portField, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(hostField, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(passwordField, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(nameField, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(jdbcCustomiseCheckbox, GroupLayout.Alignment.LEADING)))
                    .addComponent(connectionCheck, GroupLayout.Alignment.LEADING)
                    .addComponent(heading, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 182, GroupLayout.PREFERRED_SIZE)
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(typeLabel)
                        .addGap(34, 34, 34)
                        .addComponent(databaseTypeComboBox, 0, 254, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(customConnectionCheckBox)
                            .addComponent(databaseConnectionComboBox, 0, 254, Short.MAX_VALUE))))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(stepsPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(eesa.gui.Application.GAP, eesa.gui.Application.GAP, eesa.gui.Application.GAP))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(heading)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(databaseTypeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeLabel))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(databaseConnectionComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(customConnectionCheckBox)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(hostLabel)
                            .addComponent(hostField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(portLabel)
                            .addComponent(portField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameLabel)
                            .addComponent(usernameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordLabel)
                            .addComponent(passwordField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(nameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLabel))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jdbcField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jdbcLabel))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jdbcCustomiseCheckbox)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectionCheck)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(helpButton)
                    .addComponent(backButton2)
                    .addComponent(nextButton)
                    .addComponent(finishButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );
	}

	/**
     * 
     */
    private void createFields() {
        jLabel1 = new JLabel();
        hostLabel = new JLabel();
        heading = new JLabel();
        typeLabel = new JLabel();
        connectionCheck = new JButton();
        portLabel = new JLabel();
        databaseTypeComboBox = new JComboBox<DatabaseConnector>();
        customConnectionCheckBox = new JCheckBox();
        databaseConnectionComboBox = new JComboBox<Database>();
        stepsPanel = new JPanel();
        stepsTitle = new JLabel();
        step1 = new JLabel();
        step2 = new JLabel();
        step3 = new JLabel();
        step4 = new JLabel();
        backButton2 = new JButton();
        hostField = new JTextField();
        finishButton = new JButton();
        portField = new JTextField();
        cancelButton = new JButton();
        usernameField = new JTextField();
        nextButton = new JButton();
        passwordField = new JPasswordField();
        nameField = new JTextField();
        jdbcLabel = new JLabel();
        jdbcField = new JTextField();
        nameLabel = new JLabel();
        jdbcCustomiseCheckbox = new JCheckBox();
        passwordLabel = new JLabel();
        helpButton = new JButton();
        usernameLabel = new JLabel();
	}

	/**
     * 
     * @param evt Event
     */
    private void connectionCheckActionPerformed(final ActionEvent evt) {
        Database db;
        DatabaseConnector dbConnector = (DatabaseConnector) databaseTypeComboBox.getSelectedItem();
        if (customConnectionCheckBox.isSelected()) {
            String url = jdbcField.getText() + new String(passwordField.getPassword());
            db = dbConnector.getDatabase(url);
        } else {
            db = (Database) databaseConnectionComboBox.getSelectedItem();
        }
        try {
            db.getConnection();
        } catch (DatabaseException ex) {
            JOptionPane.showMessageDialog(this, dbConnector.toString() + " Error: " + ex.getMessage(), "Connection Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(SQLExportPeriodsWindow.class.getName()).log(Level.INFO, "Connection Test Error", ex);
            return;
        }
        JOptionPane.showMessageDialog(this, dbConnector.toString() + " Connection Succesful!", "Connection Success", JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * 
     * @param evt Event
     */
    private void databaseTypeComboBoxItemStateChanged(final ItemEvent evt) {
        databaseConnectionComboBox.setModel(this.getDefinedDatabaseConnections());
    }
    /**
     * 
     * @param evt Event
     */
    private void databaseTypeComboBoxActionPerformed(final ActionEvent evt) {

   }
    /**
     * 
     * @param evt Event
     */
    private void customConnectionCheckBoxItemStateChanged(final ItemEvent evt) {
        hostField.setEditable(customConnectionCheckBox.isSelected());
        portField.setEditable(customConnectionCheckBox.isSelected());
        usernameField.setEditable(customConnectionCheckBox.isSelected());
        passwordField.setEditable(customConnectionCheckBox.isSelected());
        nameField.setEditable(customConnectionCheckBox.isSelected());
        jdbcCustomiseCheckbox.setEnabled(customConnectionCheckBox.isSelected());
        jdbcField.setEditable(customConnectionCheckBox.isSelected() && jdbcCustomiseCheckbox.isSelected());
    }
    /**
     * 
     * @param evt Event
     */
    private void customConnectionCheckBoxActionPerformed(final ActionEvent evt) {

   }
    /**
     * 
     * @param evt Event
     */
    private void databaseConnectionComboBoxItemStateChanged(final ItemEvent evt) {
        jdbcField.setText(((Database) databaseConnectionComboBox.getSelectedItem()).getURL());
    }
    /**
     * 
     * @param evt Event
     */
    private void backButton2ActionPerformed(final ActionEvent evt) {
        //Do Nothing
    }
    /**
     * 
     * @param evt Event
     */
    private void hostFieldActionPerformed(final ActionEvent evt) {

   }
    /**
     * 
     * @param evt Event
     */
    private void finishButtonActionPerformed(final ActionEvent evt) {
    	// Do Nothing
    }
    /**
     * 
     * @param evt Event
     */
    private void cancelButtonActionPerformed(final ActionEvent evt) {
    	setVisible(false);
        dispose();
    }
    /**
     * 
     * @param evt Event
     */
    private void nextButtonActionPerformed(final ActionEvent evt) {
        updateData();
        new SQLInsertionExportPeriodsWindow(data).setVisible(true);
        dispose();
    }
    /**
     * 
     * @param evt Event
     */
    private void jdbcCustomiseCheckboxItemStateChanged(final ItemEvent evt) {
        jdbcField.setEditable(customConnectionCheckBox.isSelected() && jdbcCustomiseCheckbox.isSelected());
    }
    /**
     * 
     * @param evt Event
     */
    private void jdbcCustomiseCheckboxActionPerformed(final ActionEvent evt) {

   }
    /**
     * 
     * @param evt Event
     */
    private void helpButtonActionPerformed(final ActionEvent evt) {

   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * 
     */
    private JButton backButton2;
    /**
     * 
     */
    private JButton cancelButton;
    /**
     * 
     */
    private JButton connectionCheck;
    /**
     * 
     */
    private JCheckBox customConnectionCheckBox;
    /**
     * 
     */
    private JComboBox<Database> databaseConnectionComboBox;
    /**
     * 
     */
    private JComboBox<DatabaseConnector> databaseTypeComboBox;
    /**
     * 
     */
    private JButton finishButton;
    /**
     * 
     */
    private JLabel heading;
    /**
     * 
     */
    private JButton helpButton;
    /**
     * 
     */
    private JTextField hostField;
    /**
     * 
     */
    private JLabel hostLabel;
    /**
     * 
     */
    private JLabel jLabel1;
    /**
     * 
     */
    private JCheckBox jdbcCustomiseCheckbox;
    /**
     * 
     */
    private JTextField jdbcField;
    /**
     * 
     */
    private JLabel jdbcLabel;
    /**
     * 
     */
    private JTextField nameField;
    /**
     * 
     */
    private JLabel nameLabel;
    /**
     * 
     */
    private JButton nextButton;
    /**
     * 
     */
    private JPasswordField passwordField;
    /**
     * 
     */
    private JLabel passwordLabel;
    /**
     * 
     */
    private JTextField portField;
    /**
     * 
     */
    private JLabel portLabel;
    /**
     * 
     */
    private JLabel step1;
    /**
     * 
     */
    private JLabel step2;
    /**
     * 
     */
    private JLabel step3;
    /**
     * 
     */
    private JLabel step4;
    /**
     * 
     */
    private JPanel stepsPanel;
    /**
     * 
     */
    private JLabel stepsTitle;
    /**
     * 
     */
    private JLabel typeLabel;
    /**
     * 
     */
    private JTextField usernameField;
    /**
     * 
     */
    private JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * @return 
     */
    private ComboBoxModel<DatabaseConnector> getDatabaseTypes() {
        DatabaseConnector[] databaseTypes = DatabaseManager.getDatabaseConnectors();
        return new DefaultComboBoxModel<DatabaseConnector>(databaseTypes);
    }
    /**
     * 
     * @return
     */
    private ComboBoxModel<Database> getDefinedDatabaseConnections() {
        Database[] definedDatabaseConnections = ((DatabaseConnector) databaseTypeComboBox.getSelectedItem()).getDefinedDatabaseConnections();
        return new DefaultComboBoxModel<Database>(definedDatabaseConnections);        
    }
    /**
     * 
     */
    public final void updateJDBCConnectionString() {
        if (customConnectionCheckBox.isSelected()) {
            if (!jdbcCustomiseCheckbox.isSelected()) {
                String url = "jdbc:";
                url += ((DatabaseConnector) databaseTypeComboBox.getSelectedItem()).getJDBCCode() + "://";
                url += hostField.getText() + ":";
                url += portField.getText() + "/";
                url += nameField.getText();
                url += "?user=" + usernameField.getText();
                url += "&password=";            
                jdbcField.setText(url);
                jdbcField.setCaretPosition(0);
            }
        }
    }
    /**
     * 
     */
    public final void updateData() {
        Database db;
        DatabaseConnector dbConnector = (DatabaseConnector) databaseTypeComboBox.getSelectedItem();
        if (customConnectionCheckBox.isSelected()) {
            String url = jdbcField.getText() + new String(passwordField.getPassword()); 
            db = dbConnector.getDatabase(url);
        } else {
            db = (Database) databaseConnectionComboBox.getSelectedItem();
        }
        data.setDatabaseConnector(dbConnector);
        data.setDatabase(db);
    }
}
