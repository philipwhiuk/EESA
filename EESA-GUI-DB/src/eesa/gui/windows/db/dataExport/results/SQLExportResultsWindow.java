/*
 * SQLExportResultsWindow.java
 *
 * Created on 04-Apr-2012, 20:31:16
 */
package eesa.gui.windows.db.dataExport.results;

import eesa.db.Database;
import eesa.db.DatabaseConnector;
import eesa.db.DatabaseException;
import eesa.db.DatabaseManager;
import eesa.db.dataExport.SQLJobResultDataExport;
import eesa.gui.windows.dataExport.results.AbstractExportResultsWindow;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 * Allows the user to customize the database connection details.
 * @author Philip
 */
public class SQLExportResultsWindow extends AbstractExportResultsWindow {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    /**
     * 
     */
    private final SQLJobResultDataExport data;

    /** Creates new form SQLExportResultsWindow.
     * @param data 
     */
    public SQLExportResultsWindow(final SQLJobResultDataExport data) {
        this.data = data;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
    	createFields();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Database Connection");

        hostLabel.setText("Database Host");

        heading.setFont(new java.awt.Font("Tahoma", 1,
        		eesa.gui.Application.HEADING_FONT_SIZE)); // NOI18N
        heading.setText("Select SQL Database Source");

        typeLabel.setText("Database Type");

        connectionCheck.setText("Test Connection");
        connectionCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                connectionCheckActionPerformed(evt);
            }
        });

        portLabel.setText("Database Port");

        databaseTypeComboBox.setModel(getDatabaseTypes());
        databaseTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(final java.awt.event.ItemEvent evt) {
                databaseTypeComboBoxItemStateChanged(evt);
            }
        });
        databaseTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                databaseTypeComboBoxActionPerformed(evt);
            }
        });

        customConnectionCheckBox.setText("Custom Connection");
        customConnectionCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(final java.awt.event.ItemEvent evt) {
                customConnectionCheckBoxItemStateChanged(evt);
            }
        });
        customConnectionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                customConnectionCheckBoxActionPerformed(evt);
            }
        });

        databaseConnectionComboBox.setModel(getDefinedDatabaseConnections());
        databaseConnectionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(final java.awt.event.ItemEvent evt) {
                databaseConnectionComboBoxItemStateChanged(evt);
            }
        });

        stepsPanel.setBackground(new java.awt.Color(255, 255, 255));

        stepsTitle.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        stepsTitle.setText("Steps");

        step1.setFont(new java.awt.Font("Tahoma", 2, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step1.setText("1. Select Type");

        step2.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step2.setText("2. Select Destination");

        step3.setText("3. Customise Insertion");

        step4.setText("4. Map Data");

        buildStepsPanelLayout();
        
        backButton2.setText("Back");
        backButton2.setEnabled(false);
        backButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                backButton2ActionPerformed(evt);
            }
        });

        hostField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                hostFieldActionPerformed(evt);
            }
        });

        finishButton.setText("Finish");
        finishButton.setEnabled(false);
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        jdbcLabel.setText("JDBC Connection");

        jdbcField.setEditable(false);

        nameLabel.setText("Database Name");

        jdbcCustomiseCheckbox.setText("Custom JDBC URL");
        jdbcCustomiseCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(final java.awt.event.ItemEvent evt) {
                jdbcCustomiseCheckboxItemStateChanged(evt);
            }
        });
        jdbcCustomiseCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                jdbcCustomiseCheckboxActionPerformed(evt);
            }
        });

        passwordLabel.setText("Database Password");

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        usernameLabel.setText("Database Username");

        buildLayout();

        pack();
    }
    /**
     * 
     */
    private void buildLayout() {
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(244, Short.MAX_VALUE)
                .addComponent(backButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finishButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(stepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hostLabel)
                            .addComponent(portLabel)
                            .addComponent(passwordLabel)
                            .addComponent(usernameLabel)
                            .addComponent(nameLabel)
                            .addComponent(jdbcLabel))
                        .addGap(eesa.gui.Application.GAP, eesa.gui.Application.GAP, eesa.gui.Application.GAP)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jdbcField)
                            .addComponent(usernameField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hostField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jdbcCustomiseCheckbox, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addComponent(connectionCheck, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(heading, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(typeLabel)
                        .addGap(34, 34, 34)
                        .addComponent(databaseTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customConnectionCheckBox)
                            .addComponent(databaseConnectionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(stepsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(eesa.gui.Application.GAP, eesa.gui.Application.GAP, eesa.gui.Application.GAP))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(heading)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(databaseTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeLabel))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(databaseConnectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(customConnectionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hostLabel)
                            .addComponent(hostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portLabel)
                            .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameLabel)
                            .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordLabel)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jdbcField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jdbcLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jdbcCustomiseCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectionCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(helpButton)
                    .addComponent(backButton2)
                    .addComponent(nextButton)
                    .addComponent(finishButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );
	}

	/**
     * 
     */
    private void buildStepsPanelLayout() {
        javax.swing.GroupLayout stepsPanelLayout = new javax.swing.GroupLayout(stepsPanel);
        stepsPanel.setLayout(stepsPanelLayout);
        stepsPanelLayout.setHorizontalGroup(
            stepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stepsTitle)
                    .addComponent(step2)
                    .addComponent(step3)
                    .addComponent(step1)
                    .addComponent(step4))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        stepsPanelLayout.setVerticalGroup(
            stepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stepsTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step4)
                .addContainerGap(211, Short.MAX_VALUE))
        );

	}

	/**
     * 
     */
    private void createFields() {
        jLabel1 = new javax.swing.JLabel();
        hostLabel = new javax.swing.JLabel();
        heading = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        connectionCheck = new javax.swing.JButton();
        portLabel = new javax.swing.JLabel();
        databaseTypeComboBox = new javax.swing.JComboBox<DatabaseConnector>();
        customConnectionCheckBox = new javax.swing.JCheckBox();
        databaseConnectionComboBox = new javax.swing.JComboBox<Database>();
        stepsPanel = new javax.swing.JPanel();
        stepsTitle = new javax.swing.JLabel();
        step1 = new javax.swing.JLabel();
        step2 = new javax.swing.JLabel();
        step3 = new javax.swing.JLabel();
        step4 = new javax.swing.JLabel();
        backButton2 = new javax.swing.JButton();
        hostField = new javax.swing.JTextField();
        finishButton = new javax.swing.JButton();
        portField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        usernameField = new javax.swing.JTextField();
        nextButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        nameField = new javax.swing.JTextField();
        jdbcLabel = new javax.swing.JLabel();
        jdbcField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        jdbcCustomiseCheckbox = new javax.swing.JCheckBox();
        passwordLabel = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        usernameLabel = new javax.swing.JLabel();
	}

	/**
     * 
     * @param evt Event
     */
    private void connectionCheckActionPerformed(final java.awt.event.ActionEvent evt) {
        Database db;
        DatabaseConnector dbConnector = (DatabaseConnector) databaseTypeComboBox.getSelectedItem();
        if (customConnectionCheckBox.isSelected()) {
            String url = jdbcField.getText() + new String(passwordField.getPassword());
            db = dbConnector.getDatabase(url);
        } else {
            db = (Database) databaseConnectionComboBox.getSelectedItem();
        }
        try {
            db.getConnection();
        } catch (DatabaseException ex) {
            JOptionPane.showMessageDialog(this, dbConnector.toString() + " Error: " + ex.getMessage(), "Connection Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(SQLExportResultsWindow.class.getName()).log(Level.INFO, "Connection Test Error", ex);
            return;
        }
        JOptionPane.showMessageDialog(this, dbConnector.toString() + " Connection Succesful!", "Connection Success", JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * 
     * @param evt Event
     */
    private void databaseTypeComboBoxItemStateChanged(final java.awt.event.ItemEvent evt) {
        databaseConnectionComboBox.setModel(this.getDefinedDatabaseConnections());
    }
    /**
     * 
     * @param evt Event
     */
    private void databaseTypeComboBoxActionPerformed(final java.awt.event.ActionEvent evt) {

   }
    /**
     * 
     * @param evt Event
     */
    private void customConnectionCheckBoxItemStateChanged(final java.awt.event.ItemEvent evt) {
        hostField.setEditable(customConnectionCheckBox.isSelected());
        portField.setEditable(customConnectionCheckBox.isSelected());
        usernameField.setEditable(customConnectionCheckBox.isSelected());
        passwordField.setEditable(customConnectionCheckBox.isSelected());
        nameField.setEditable(customConnectionCheckBox.isSelected());
        jdbcCustomiseCheckbox.setEnabled(customConnectionCheckBox.isSelected());
        jdbcField.setEditable(customConnectionCheckBox.isSelected() && jdbcCustomiseCheckbox.isSelected());
    }
    /**
     * 
     * @param evt Event
     */
    private void customConnectionCheckBoxActionPerformed(final java.awt.event.ActionEvent evt) {

   }
    /**
     * 
     * @param evt Event
     */
    private void databaseConnectionComboBoxItemStateChanged(final java.awt.event.ItemEvent evt) {
        jdbcField.setText(((Database) databaseConnectionComboBox.getSelectedItem()).getURL());
    }
    /**
     * 
     * @param evt Event
     */
    private void backButton2ActionPerformed(final java.awt.event.ActionEvent evt) {
        //Do Nothing
    }
    /**
     * 
     * @param evt Event
     */
    private void hostFieldActionPerformed(final java.awt.event.ActionEvent evt) {

   }
    /**
     * 
     * @param evt Event
     */
    private void finishButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        // Do Nothing
    }
    /**
     * 
     * @param evt Event
     */
    private void cancelButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        setVisible(false);
        dispose();
    }
    /**
     * 
     * @param evt Event
     */
    private void nextButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        updateData();
        new SQLInsertionExportResultsWindow(data).setVisible(true);
        dispose();
    }
    /**
     * 
     * @param evt Event
     */
    private void jdbcCustomiseCheckboxItemStateChanged(final java.awt.event.ItemEvent evt) {
        jdbcField.setEditable(customConnectionCheckBox.isSelected() && jdbcCustomiseCheckbox.isSelected());
    }
    /**
     * 
     * @param evt Event
     */
    private void jdbcCustomiseCheckboxActionPerformed(final java.awt.event.ActionEvent evt) {

   }
    /**
     * 
     * @param evt Event
     */
    private void helpButtonActionPerformed(final java.awt.event.ActionEvent evt) {

   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * 
     */
    private javax.swing.JButton backButton2;
    /**
     * 
     */
    private javax.swing.JButton cancelButton;
    /**
     * 
     */
    private javax.swing.JButton connectionCheck;
    /**
     * 
     */
    private javax.swing.JCheckBox customConnectionCheckBox;
    /**
     * 
     */
    private javax.swing.JComboBox<Database> databaseConnectionComboBox;
    /**
     * 
     */
    private javax.swing.JComboBox<DatabaseConnector> databaseTypeComboBox;
    /**
     * 
     */
    private javax.swing.JButton finishButton;
    /**
     * 
     */
    private javax.swing.JLabel heading;
    /**
     * 
     */
    private javax.swing.JButton helpButton;
    /**
     * 
     */
    private javax.swing.JTextField hostField;
    /**
     * 
     */
    private javax.swing.JLabel hostLabel;
    /**
     * 
     */
    private javax.swing.JLabel jLabel1;
    /**
     * 
     */
    private javax.swing.JCheckBox jdbcCustomiseCheckbox;
    /**
     * 
     */
    private javax.swing.JTextField jdbcField;
    /**
     * 
     */
    private javax.swing.JLabel jdbcLabel;
    /**
     * 
     */
    private javax.swing.JTextField nameField;
    /**
     * 
     */
    private javax.swing.JLabel nameLabel;
    /**
     * 
     */
    private javax.swing.JButton nextButton;
    /**
     * 
     */
    private javax.swing.JPasswordField passwordField;
    /**
     * 
     */
    private javax.swing.JLabel passwordLabel;
    /**
     * 
     */
    private javax.swing.JTextField portField;
    /**
     * 
     */
    private javax.swing.JLabel portLabel;
    /**
     * 
     */
    private javax.swing.JLabel step1;
    /**
     * 
     */
    private javax.swing.JLabel step2;
    /**
     * 
     */
    private javax.swing.JLabel step3;
    /**
     * 
     */
    private javax.swing.JLabel step4;
    /**
     * 
     */
    private javax.swing.JPanel stepsPanel;
    /**
     * 
     */
    private javax.swing.JLabel stepsTitle;
    /**
     * 
     */
    private javax.swing.JLabel typeLabel;
    /**
     * 
     */
    private javax.swing.JTextField usernameField;
    /**
     * 
     */
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * @return 
     */
    private ComboBoxModel<DatabaseConnector> getDatabaseTypes() {
        DatabaseConnector[] databaseTypes = DatabaseManager.getDatabaseConnectors();
        return new DefaultComboBoxModel<DatabaseConnector>(databaseTypes);
    }
    /**
     * 
     * @return
     */
    private ComboBoxModel<Database> getDefinedDatabaseConnections() {
        Database[] definedDatabaseConnections = ((DatabaseConnector) databaseTypeComboBox.getSelectedItem()).getDefinedDatabaseConnections();
        return new DefaultComboBoxModel<Database>(definedDatabaseConnections);        
    }
    /**
     * 
     */
    public final void updateJDBCConnectionString() {
        if (customConnectionCheckBox.isSelected()) {
            if (!jdbcCustomiseCheckbox.isSelected()) {
                String url = "jdbc:";
                url += ((DatabaseConnector) databaseTypeComboBox.getSelectedItem()).getJDBCCode() + "://";
                url += hostField.getText() + ":";
                url += portField.getText() + "/";
                url += nameField.getText();
                url += "?user=" + usernameField.getText();
                url += "&password=";            
                jdbcField.setText(url);
                jdbcField.setCaretPosition(0);
            }
        }
    }
    /**
     * 
     */
    private void updateData() {
        Database db;
        DatabaseConnector dbConnector = (DatabaseConnector) databaseTypeComboBox.getSelectedItem();
        if (customConnectionCheckBox.isSelected()) {
            String url = jdbcField.getText() + new String(passwordField.getPassword()); 
            db = dbConnector.getDatabase(url);
        } else {
            db = (Database) databaseConnectionComboBox.getSelectedItem();
        }
        data.setDatabaseConnector(dbConnector);
        data.setDatabase(db);
    }
}
