/*
 * SQLInsertionExportResultsWindow.java
 *
 * Created on 04-Apr-2012, 20:35:04
 */

package eesa.gui.windows.db.dataExport.results;

import eesa.db.Database;
import eesa.db.DatabaseCondition;
import eesa.db.DatabaseConnector;
import eesa.db.DatabaseSort;
import eesa.db.DatabaseTable;
import eesa.db.Field;
import eesa.db.InsertQuery;
import eesa.db.Operator;
import eesa.db.dataExport.SQLJobResultDataExport;
import eesa.gui.lists.db.DatabaseFieldListModel;
import eesa.gui.windows.AbstractProcessWindow;
import eesa.gui.windows.db.AddDatabaseFieldWindow;
import eesa.gui.windows.db.AddDatabaseTableWindow;
import eesa.gui.windows.db.DatabaseWindow;

/**
 * Allows the user to select the fields to insert into.
 * @author Philip
 */
public class SQLInsertionExportResultsWindow extends AbstractProcessWindow implements DatabaseWindow {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    /**
     * 
     */
    private DatabaseFieldListModel databaseFieldListModel;
    /**
     * 
     */
    private final SQLJobResultDataExport data;
    /** Creates new form SQLInsertionExportResultsWindow.
     * @param data 
     */
    public SQLInsertionExportResultsWindow(final SQLJobResultDataExport data) {
        this.data = data;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
    	createFields();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        stepsPanel.setBackground(new java.awt.Color(255, 255, 255));
        stepsTitle.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        stepsTitle.setText("Steps");
        step1.setFont(new java.awt.Font("Tahoma", 2, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step1.setText("1. Select Type");
        step2.setFont(new java.awt.Font("Tahoma", 2, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step2.setText("2. Select Destination");
        step3.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step3.setText("3. Customise Insertion");
        step4.setText("4. Map Data");
        buildStepsPanelLayout();
        dataFieldsLabel.setText("Data Fields");
        addDataFieldButton.setText("+");
        addDataFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                addDataFieldButtonActionPerformed(evt);
            }
        });
        removeDataFieldButton.setText("-");
        removeDataFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                removeDataFieldButtonActionPerformed(evt);
            }
        });
        dataFieldsList.setModel(databaseFieldListModel);
        jScrollPane3.setViewportView(dataFieldsList);
        buildJPanelLayout4();

        backButton2.setText("Back");
        backButton2.setEnabled(false);
        backButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                backButton2ActionPerformed(evt);
            }
        });

        databaseTypeLabel.setText(getDatabaseConnector().toString());

        finishButton.setText("Finish");
        finishButton.setEnabled(false);
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        dataSourceSeparator.setText("::");

        heading.setFont(new java.awt.Font("Tahoma", 1,
        		eesa.gui.Application.HEADING_FONT_SIZE)); // NOI18N
        heading.setText("Customise Insertion Query");

        databaseConnectionLabel.setText(getDatabase().toString());

        dataSourceLabel.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.FONT_SIZE)); // NOI18N
        dataSourceLabel.setText("Data Source:");

        dataTablesLabel.setText("Data Tables:");

        addDataTableButton.setText("Set");
        addDataTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                addDataTableButtonActionPerformed(evt);
            }
        });

        removeDataTableButton.setText("Remove");
        removeDataTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                removeDataTableButtonActionPerformed(evt);
            }
        });

        databaseTableField.setEditable(false);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(addDataTableButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(dataTablesLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(removeDataTableButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(databaseTableField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(dataTablesLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addDataTableButton)
                    .add(databaseTableField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removeDataTableButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buildLayout();

        pack();
    }
    /**
     * 
     */
    private void buildLayout() {
        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(stepsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(heading, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 182, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(dataSourceLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(databaseTypeLabel)
                                        .add(6, 6, 6)
                                        .add(dataSourceSeparator)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(databaseConnectionLabel)))
                                .add(0, 0, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(eesa.gui.Application.GAP, eesa.gui.Application.GAP, eesa.gui.Application.GAP)
                                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(backButton2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nextButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(finishButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(helpButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(heading)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(dataSourceLabel)
                    .add(databaseTypeLabel)
                    .add(databaseConnectionLabel)
                    .add(dataSourceSeparator))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 24, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(helpButton)
                    .add(backButton2)
                    .add(nextButton)
                    .add(finishButton)
                    .add(cancelButton))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(stepsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(40, 40, 40))
        );
	}

	/**
     * 
     */
    private void buildJPanelLayout4() {
        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(dataFieldsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(removeDataFieldButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(addDataFieldButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(dataFieldsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(addDataFieldButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeDataFieldButton)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
	}

	/**
     * 
     */
    private void buildStepsPanelLayout() {
        
        org.jdesktop.layout.GroupLayout stepsPanelLayout = new org.jdesktop.layout.GroupLayout(stepsPanel);
        stepsPanel.setLayout(stepsPanelLayout);
        stepsPanelLayout.setHorizontalGroup(
            stepsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(stepsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(stepsTitle)
                    .add(step2)
                    .add(step1)
                    .add(step3)
                    .add(step4))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        stepsPanelLayout.setVerticalGroup(
            stepsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(stepsTitle)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step4)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
	}

	/**
     * 
     */
    private void createFields() {
        stepsPanel = new javax.swing.JPanel();
        stepsTitle = new javax.swing.JLabel();
        step1 = new javax.swing.JLabel();
        step2 = new javax.swing.JLabel();
        step3 = new javax.swing.JLabel();
        step4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        dataFieldsLabel = new javax.swing.JLabel();
        addDataFieldButton = new javax.swing.JButton();
        removeDataFieldButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        dataFieldsList = new javax.swing.JList<Field>();
        backButton2 = new javax.swing.JButton();
        databaseTypeLabel = new javax.swing.JLabel();
        finishButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        dataSourceSeparator = new javax.swing.JLabel();
        heading = new javax.swing.JLabel();
        databaseConnectionLabel = new javax.swing.JLabel();
        dataSourceLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        dataTablesLabel = new javax.swing.JLabel();
        addDataTableButton = new javax.swing.JButton();
        removeDataTableButton = new javax.swing.JButton();
        databaseTableField = new javax.swing.JTextField();
	}

	/**
     * 
     * @param evt
     */
    private void addDataFieldButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        new AddDatabaseFieldWindow(this).setVisible(true);
    }
    /**
     * 
     * @param evt
     */
    private void removeDataFieldButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        databaseFieldListModel.removeField((Field) dataFieldsList.getSelectedValue());
    }
    /**
     * 
     * @param evt
     */
    private void backButton2ActionPerformed(final java.awt.event.ActionEvent evt) {
        //Do Nothing
    }
    /**
     * 
     * @param evt
     */
    private void finishButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        // Do Nothing
    }
    /**
     * 
     * @param evt
     */
    private void cancelButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        setVisible(false);
        dispose();
    }
    /**
     * 
     * @param evt
     */
    private void helpButtonActionPerformed(final java.awt.event.ActionEvent evt) {

   }
    /**
     * 
     * @param evt
     */
    private void nextButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        updateData();
        new SQLMapExportResultsWindow(data).setVisible(true);
        dispose();
    }
    /**
     * 
     * @param evt
     */
    private void addDataTableButtonActionPerformed(final java.awt.event.ActionEvent evt) {
    	new AddDatabaseTableWindow(this).setVisible(true);
    }
    /**
     * 
     * @param evt
     */
    private void removeDataTableButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        databaseTableField.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * 
     */
    private javax.swing.JButton addDataFieldButton;
    /**
     * 
     */
    private javax.swing.JButton addDataTableButton;
    /**
     * 
     */
    private javax.swing.JButton backButton2;
    /**
     * 
     */
    private javax.swing.JButton cancelButton;
    /**
     * 
     */
    private javax.swing.JLabel dataFieldsLabel;
    /**
     * 
     */
    private javax.swing.JList<Field> dataFieldsList;
    /**
     * 
     */
    private javax.swing.JLabel dataSourceLabel;
    /**
     * 
     */
    private javax.swing.JLabel dataSourceSeparator;
    /**
     * 
     */
    private javax.swing.JLabel dataTablesLabel;
    /**
     * 
     */
    private javax.swing.JLabel databaseConnectionLabel;
    /**
     * 
     */
    private javax.swing.JTextField databaseTableField;
    /**
     * 
     */
    private javax.swing.JLabel databaseTypeLabel;
    /**
     * 
     */
    private javax.swing.JButton finishButton;
    /**
     * 
     */
    private javax.swing.JLabel heading;
    /**
     * 
     */
    private javax.swing.JButton helpButton;
    /**
     * 
     */
    private javax.swing.JPanel jPanel2;
    /**
     * 
     */
    private javax.swing.JPanel jPanel4;
    /**
     * 
     */
    private javax.swing.JScrollPane jScrollPane3;
    /**
     * 
     */
    private javax.swing.JButton nextButton;
    /**
     * 
     */
    private javax.swing.JButton removeDataFieldButton;
    /**
     * 
     */
    private javax.swing.JButton removeDataTableButton;
    /**
     * 
     */
    private javax.swing.JLabel step1;
    /**
     * 
     */
    private javax.swing.JLabel step2;
    /**
     * 
     */
    private javax.swing.JLabel step3;
    /**
     * 
     */
    private javax.swing.JLabel step4;
    /**
     * 
     */
    private javax.swing.JPanel stepsPanel;
    /**
     * 
     */
    private javax.swing.JLabel stepsTitle;
    // End of variables declaration//GEN-END:variables
    /**
     * 
     */
	private DatabaseTable databaseTable;

    @Override
	public final Database getDatabase() {
        return data.getDatabase();
    }

    @Override
	public final DatabaseConnector getDatabaseConnector() {
        return data.getDatabaseConnector();
    }

    @Override
	public final void addTable(final DatabaseTable table) {
    	databaseTable = table;
        databaseTableField.setText(databaseTable.toString());
    }

    /**
     * 
     * @return
     */
    public final String getTable() {
        return databaseTableField.getText();
    }

    @Override
	public final void addField(final Field f) {
        databaseFieldListModel.addField(f);
    }

    @Override
	public final Field[] getFields() {
        return databaseFieldListModel.getFields();
    }

    @Override
	public final Operator[] getOperators() {
        throw new UnsupportedOperationException("Insert Query Does Not Use Operators.");
    }

    @Override
	public final void setCondition(final DatabaseCondition condition) {
        throw new UnsupportedOperationException("Insert Query Does Not Support Conditions.");
    }

    @Override
	public final DatabaseCondition getCondition() {
        throw new UnsupportedOperationException("Insert Query Does Not Support Conditions.");
    }

    @Override
	public final void addSort(final DatabaseSort sort) {
        throw new UnsupportedOperationException("Insert Query Does Not Support Sorting.");
    }

    @Override
	public final DatabaseSort[] getSorts() {
        throw new UnsupportedOperationException("Insert Query Does Not Support Sorting.");
    }

    /**
     * 
     */
    private void updateData() {
        InsertQuery insert = data.getDatabase().insert();
        insert.setTable(getTable());
        insert.setFields(getFields());
        data.setInsertQuery(insert);
    }

    @Override
	public final DatabaseTable[] getTables() {
        return new DatabaseTable[]{databaseTable};
    }

}
