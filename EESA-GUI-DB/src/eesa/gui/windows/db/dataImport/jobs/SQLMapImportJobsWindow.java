/*
 * SQLMapImportJobsWindow.java
 *
 * Created on 05-Apr-2012, 15:27:00
 */

package eesa.gui.windows.db.dataImport.jobs;

import eesa.dataImport.JobDataImport;
import eesa.db.DatabaseException;
import eesa.db.dataImport.SQLJobDataImport;
import eesa.exceptions.EESAException;
import eesa.exceptions.JobException;
import eesa.exceptions.InvalidMappingException;
import eesa.exceptions.TimeIntervalException;
import eesa.gui.help.HelpManager;
import eesa.gui.tables.DataMapTableHeader;
import eesa.gui.tables.DataMapTableHeaderComboCellRenderer;
import eesa.gui.tables.DataMapTableModel;
import eesa.gui.windows.AbstractProcessWindow;

import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 * Allows the user to create the mapping between SQL fields and EESA data.
 * @author Philip
 */
public class SQLMapImportJobsWindow extends AbstractProcessWindow {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    /**
     * 
     */
    private final SQLJobDataImport data;

    /** Creates new form SQLMapImportJobsWindow.
     * @param data
     * @throws EESAException exception
     */
    public SQLMapImportJobsWindow(final SQLJobDataImport data) 
    		throws EESAException {
        this.data = data;
        this.data.runMapping();
        initComponents();
        HelpManager.addHelpForClassToButton(helpButton, SQLMapImportJobsWindow.class);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	createFields();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import Jobs - Map Query Data");
        stepsPanel.setBackground(new java.awt.Color(255, 255, 255));
        stepsTitle.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        stepsTitle.setText("Steps");
        step1.setFont(new java.awt.Font("Tahoma", 2, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step1.setText("1. Select Type");
        step2.setFont(new java.awt.Font("Tahoma", 2, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step2.setText("2. Select Source");
        step3.setFont(new java.awt.Font("Tahoma", 2, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step3.setText("3. Customise Retrieval");
        step4.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step4.setText("4. Map Data");
        jLabel1.setText("5. View Results");

        org.jdesktop.layout.GroupLayout stepsPanelLayout = new org.jdesktop.layout.GroupLayout(stepsPanel);
        stepsPanel.setLayout(stepsPanelLayout);
        stepsPanelLayout.setHorizontalGroup(
            stepsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(stepsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(step3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .add(stepsTitle)
                    .add(step2)
                    .add(step4)
                    .add(step1)
                    .add(jLabel1))
                .addContainerGap())
        );
        stepsPanelLayout.setVerticalGroup(
            stepsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(stepsTitle)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(step4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .addContainerGap(172, Short.MAX_VALUE))
        );

        backButton.setText("Back");
        backButton.setEnabled(false);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        finishButton.setText("Finish");
        finishButton.setEnabled(false);
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        connectionCheckLabel.setText(" ");

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        dataMapTable.setModel(getDataMapTableModel());
        dataMapTable.setTableHeader(getDataMapTableHeader());
        jScrollPane1.setViewportView(dataMapTable);

        heading.setFont(new java.awt.Font("Tahoma", 1,
        		eesa.gui.Application.HEADING_FONT_SIZE)); // NOI18N
        heading.setText("Map Query Data");

        org.jdesktop.layout.GroupLayout layout = 
        		new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(stepsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(heading, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 182, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(323, 323, 323)
                        .add(connectionCheckLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nextButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(finishButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(helpButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, stepsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(heading)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 265, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(connectionCheckLabel)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(helpButton)
                        .add(backButton)
                        .add(nextButton)
                        .add(finishButton)
                        .add(cancelButton)))
                .addContainerGap())
        );

        pack();
    }
    /**
     * 
     */
    private void createFields() {
        stepsPanel = new javax.swing.JPanel();
        stepsTitle = new javax.swing.JLabel();
        step1 = new javax.swing.JLabel();
        step2 = new javax.swing.JLabel();
        step3 = new javax.swing.JLabel();
        step4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        finishButton = new javax.swing.JButton();
        connectionCheckLabel = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataMapTable = new javax.swing.JTable();
        heading = new javax.swing.JLabel();

	}

	/**
     * 
     * @param evt
     */
    private void backButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        try {
            updateData();
        } catch (InvalidMappingException ex) {
            Logger.getLogger(SQLMapImportJobsWindow.class.getName()).log(Level.INFO, null, ex);
            JOptionPane.showMessageDialog(this, "An invalid mapping was selected, discarding", "Import Error", JOptionPane.ERROR_MESSAGE);
        }
        new SQLRetrievalImportJobsWindow(data).setVisible(true);
        dispose();
}
    /**
     * 
     * @param evt
     */
    private void finishButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        // Do Nothing
}
    /**
     * 
     * @param evt
     */
    private void nextButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        try {
            updateData();
            new SQLResultsImportJobsWindow(data).setVisible(true); 
            dispose();
        } catch (InvalidMappingException ex) {
            Logger.getLogger(SQLMapImportJobsWindow.class.getName()).log(Level.INFO, null, ex);
            JOptionPane.showMessageDialog(this, "Import Error: " + ex.getMessage(), "Import Error", JOptionPane.ERROR_MESSAGE);
        } catch (DatabaseException ex) {
            Logger.getLogger(SQLMapImportJobsWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, data.getDatabaseConnector().toString() + " Error: " + ex.getMessage(), "Database Error", WIDTH);
        } catch (JobException ex) {
            Logger.getLogger(SQLMapImportJobsWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Unable to parse one or more jobs:" + ex.getMessage(), "Import Error", WIDTH);
        } catch (TimeIntervalException ex) {
            Logger.getLogger(SQLMapImportJobsWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Time Error", WIDTH);
        }

}
    /**
     * 
     * @param evt
     */
    private void helpButtonActionPerformed(final java.awt.event.ActionEvent evt) {
}
    /**
     * 
     * @param evt
     */
    private void cancelButtonActionPerformed(final java.awt.event.ActionEvent evt) {
        setVisible(false);
        dispose();
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * 
     */
    private javax.swing.JButton backButton;
    /**
     * 
     */
    private javax.swing.JButton cancelButton;
    /**
     * 
     */
    private javax.swing.JLabel connectionCheckLabel;
    /**
     * 
     */
    private javax.swing.JTable dataMapTable;
    /**
     * 
     */
    private javax.swing.JButton finishButton;
    /**
     * 
     */
    private javax.swing.JLabel heading;
    /**
     * 
     */
    private javax.swing.JButton helpButton;
    /**
     * 
     */
    private javax.swing.JLabel jLabel1;
    /**
     * 
     */
    private javax.swing.JScrollPane jScrollPane1;
    /**
     * 
     */
    private javax.swing.JButton nextButton;
    /**
     * 
     */
    private javax.swing.JLabel step1;
    /**
     * 
     */
    private javax.swing.JLabel step2;
    /**
     * 
     */
    private javax.swing.JLabel step3;
    /**
     * 
     */
    private javax.swing.JLabel step4;
    /**
     * 
     */
    private javax.swing.JPanel stepsPanel;
    /**
     * 
     */
    private javax.swing.JLabel stepsTitle;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     * @throws InvalidMappingException
     */
    private void updateData() throws InvalidMappingException {
        boolean[] parameters = new boolean[JobDataImport.Choice.COUNT];
        int[] columnKeys = new int[JobDataImport.Choice.COUNT];
        HashMap<String, Integer> fields = JobDataImport.Choice.getFields();        
        TableColumnModel columnModel = dataMapTable.getColumnModel();
        for (int c = 0; c < columnModel.getColumnCount(); c++) {
            String colName = columnModel.getColumn(c).getHeaderValue().toString();
            if (fields.containsKey(colName)) {
                parameters[fields.get(colName)] = true;
                columnKeys[fields.get(colName)] = c;
            }            
            Logger.getLogger(SQLMapImportJobsWindow.class.getName()).
                    log(Level.INFO,
                		"colName {0}, " + "fieldContains {1}",
                        new Object[]{colName,
                            fields.containsKey(colName)});
        }
        if (
           (parameters[JobDataImport.Choice.RELEASE] 
        		   && parameters[JobDataImport.Choice.DEADLINE] 
        				   && parameters[JobDataImport.Choice.WEIGHT]) 
            ||
           (parameters[JobDataImport.Choice.RELEASE] 
        		   && parameters[JobDataImport.Choice.DEADLINE] 
        				   && parameters[JobDataImport.Choice.DENSITY])
            ||
           (parameters[JobDataImport.Choice.RELEASE] 
        		   && parameters[JobDataImport.Choice.LENGTH] 
        				   && parameters[JobDataImport.Choice.WEIGHT])
            ||
           (parameters[JobDataImport.Choice.RELEASE] 
        		   && parameters[JobDataImport.Choice.LENGTH] 
        				   && parameters[JobDataImport.Choice.DENSITY])
            ||
           (parameters[JobDataImport.Choice.DEADLINE] 
        		   && parameters[JobDataImport.Choice.LENGTH] 
        				   && parameters[JobDataImport.Choice.WEIGHT])
            ||
           (parameters[JobDataImport.Choice.DEADLINE] 
        		   && parameters[JobDataImport.Choice.LENGTH] 
        				   && parameters[JobDataImport.Choice.DENSITY])
                    ) {
            data.setParameters(parameters);
            data.setColumnKeys(columnKeys);
        } else {
        	throw new InvalidMappingException();
        }
    }
    /**
     * 
     * @return
     */
    private TableModel getDataMapTableModel() {
        return new DataMapTableModel(data.getMappingData(),
        		data.getColumns());
    }

    /**
     * 
     * @return
     */
    private JTableHeader getDataMapTableHeader() {
        return new DataMapTableHeader(dataMapTable.getColumnModel(),
        		getDataMapComboBoxes(),
        		getDataMapRenderers());
    }
    /**
     * 
     * @return
     */
    private JComboBox<String>[] getDataMapComboBoxes() {
        int columns = data.getNumColumns();
        @SuppressWarnings("unchecked")
		JComboBox<String>[] comboBoxes = new JComboBox[columns];
        for (int c = 0; c < columns; c++) {
            comboBoxes[c] = new JComboBox<String>(data.getChoices(c));
        }
        return comboBoxes;
    }
    /**
     * 
     * @return
     */
    private DataMapTableHeaderComboCellRenderer[] getDataMapRenderers() {
        int columns = data.getNumColumns();
        DataMapTableHeaderComboCellRenderer[] renderers = new DataMapTableHeaderComboCellRenderer[columns];
        for (int c = 0; c < columns; c++) {
            renderers[c] = new DataMapTableHeaderComboCellRenderer(data.getChoices(c));
        }
        return renderers;
    }
}
