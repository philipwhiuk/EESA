package eesa.gui.windows.dataExport.jobs;

/*
 * ExportJobsWindow.java
 *
 * Created on 02-Apr-2012, 11:14:46
 */

import com.whiuk.philip.eesa.dataExport.JobDataExport;
import eesa.gui.Application;
import eesa.gui.PluginConnector;
import eesa.gui.help.HelpManager;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;

/**
 * Provides exporter selection of jobs.
 * @author Philip
 */
public class ExportJobsWindow extends AbstractExportJobsWindow {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    /**
     * 
     */
    private JobDataExport data;
    /**
     * 
     */
    private ArrayList<PluginConnector> validConnectors;
    
    /** Creates new form ExportJobsWindow.
     * 
     */
    public ExportJobsWindow() {
        getValidConnectors();
        initComponents();
        HelpManager.addHelpForClassToButton(helpButton, ExportJobsWindow.class);
    }
    /**
     * 
     * @param data 
     */
    public ExportJobsWindow(final JobDataExport data) {
        this();
        this.data = data;
        setInitialSelection();
    }
    /**
     * 
     */
    public final void setInitialSelection() {
        Iterator<PluginConnector> i = validConnectors.iterator();
        while (i.hasNext()) {
            PluginConnector pc = i.next();
            if (pc.getJobDataExportClass().equals(data.getClass())) {
                formatComboBox.setSelectedItem(pc);
            }
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
    	setSteps(new String[]{"Select Type","..."});
    	initaliseWindow();    	
    	createFields();
        heading.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.HEADING_FONT_SIZE)); // NOI18N
        heading.setText("Select Type");
        backButton.setText("Back");
        backButton.setEnabled(false);
        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        finishButton.setText("Finish");
        finishButton.setEnabled(false);
        finishButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        formatComboBox.setModel(getPluginConnectorsComboBoxModel());
        formatComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                formatComboBoxActionPerformed(evt);
            }
        });

        jobAssignmentAlgorithmLabel.setText("Type");

        formatDescriptionTextArea.setColumns(20);
        formatDescriptionTextArea.setEditable(false);
        formatDescriptionTextArea.setFont(new java.awt.Font("Arial", 0, eesa.gui.Application.FONT_SIZE)); // NOI18N
        formatDescriptionTextArea.setLineWrap(true);
        formatDescriptionTextArea.setRows(5);
        formatDescriptionTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(formatDescriptionTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(stepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(heading)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jobAssignmentAlgorithmLabel)
                                .addGap(18, 18, 18)
                                .addComponent(formatComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(184, Short.MAX_VALUE)
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finishButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(helpButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(stepsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(44, 44, 44))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(heading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobAssignmentAlgorithmLabel)
                    .addComponent(formatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(helpButton)
                    .addComponent(backButton)
                    .addComponent(nextButton)
                    .addComponent(finishButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }
    /**
     * 
     */
    private void createFields() {
        typeButtonGroup = new javax.swing.ButtonGroup();
        heading = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        finishButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        formatComboBox = new javax.swing.JComboBox<PluginConnector>();
        jobAssignmentAlgorithmLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        formatDescriptionTextArea = new javax.swing.JTextArea();
	}
	/**
     * 
     * @param evt Event
     */
    private void backButtonActionPerformed(final ActionEvent evt) {
        // Do Nothing
}
    /**
     * 
     * @param evt Event
     */
    private void nextButtonActionPerformed(final ActionEvent evt) {
        PluginConnector plugin = (PluginConnector) formatComboBox.getSelectedItem();
        if (data != null & data.getClass().equals(plugin.getClass())) {
            plugin.getNewExportJobsWindow(data).setVisible(true);
            dispose();
        } else {
            plugin.getNewExportJobsWindow().setVisible(true);           
            dispose();
        }
}
    /**
     * 
     * @param evt Event
     */
    private void finishButtonActionPerformed(final ActionEvent evt) {
        // Do Nothing
}
    /**
     * 
     * @param evt Event
     */
    private void cancelButtonActionPerformed(final ActionEvent evt) {
        setVisible(false);
        dispose();
}
    /**
     * 
     * @param evt Event
     */
    private void helpButtonActionPerformed(final ActionEvent evt) {
    }
    /**
     * 
     * @param evt Event
     */
    private void formatComboBoxActionPerformed(final ActionEvent evt) {
        PluginConnector selected = (PluginConnector) formatComboBox.getSelectedItem();
        formatDescriptionTextArea.setText(selected.getDescription());
        formatDescriptionTextArea.setCaretPosition(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * 
     */
    private javax.swing.JButton backButton;
    /**
     * 
     */
    private javax.swing.JButton cancelButton;
    /**
     * 
     */
    private javax.swing.JButton finishButton;
    /**
     * 
     */
    private javax.swing.JComboBox<PluginConnector> formatComboBox;
    /**
     * 
     */
    private javax.swing.JTextArea formatDescriptionTextArea;
    /**
     * 
     */
    private javax.swing.JLabel heading;
    /**
     * 
     */
    private javax.swing.JButton helpButton;
    /**
     * 
     */
    private javax.swing.JScrollPane jScrollPane1;
    /**
     * 
     */
    private javax.swing.JLabel jobAssignmentAlgorithmLabel;
    /**
     * 
     */
    private javax.swing.JButton nextButton;
    /**
     * 
     */
    private javax.swing.JLabel step1;
    /**
     * 
     */
    private javax.swing.JLabel step2;
    /**
     * 
     */
    private javax.swing.JPanel stepsPanel;
    /**
     * 
     */
    private javax.swing.JLabel stepsTitle;
    /**
     * 
     */
    private javax.swing.ButtonGroup typeButtonGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     */
    private void getValidConnectors() {
        PluginConnector[] connectors = Application.getPluginConnectors();
        validConnectors = new ArrayList<PluginConnector>();
        for (int c = 0; c < connectors.length; c++) {
            if (connectors[c].hasJobDataExportClass()) {
                validConnectors.add(connectors[c]);
            }
        }
    }
    /**
     * 
     * @return
     */
    private ComboBoxModel<PluginConnector> getPluginConnectorsComboBoxModel() {
        ComboBoxModel<PluginConnector> m = new DefaultComboBoxModel<PluginConnector>(validConnectors.toArray(new PluginConnector[]{}));
        formatDescriptionTextArea.setText(((PluginConnector) m.getSelectedItem()).getDescription());
        formatDescriptionTextArea.setCaretPosition(0);
        return m;
    }
}
