/*
 * ExportSpeedChartWindow.java
 *
 * Created on 06-Apr-2012, 22:16:44
 */
package eesa.gui.windows.imageExport.speed;

import eesa.core.Processor;
import eesa.core.Simulator;
import eesa.core.Test;
import eesa.gui.lists.ProcessorListModel;
import eesa.gui.lists.TestListModel;
import eesa.gui.windows.AbstractProcessWindow;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * Allows the user to customise the tests and processors shown.
 * @author Philip
 */
public class ExportSpeedChartWindow extends AbstractProcessWindow {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * Export data.
	 */
    private SpeedImageExport data;
    /**
     * Processor selection model.
     */
    private ProcessorListModel pListModel;
    /**
     * Test selection list model.
     */
    private TestListModel tListModel;

    /**
     * Creates new form ExportEnergyChartWindow.
     */
    public ExportSpeedChartWindow() {
        initComponents();
    }
    /**
     * 
     * @param e data
     */
    public ExportSpeedChartWindow(final SpeedImageExport e) {
        this();
        this.data = e;
        setInitialSelection();
    } 

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        backButton = new JButton();
        cancelButton = new JButton();
        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        testListScrollPane = new JScrollPane();
        testList = new JList<Test>();
        jPanel2 = new JPanel();
        processorLabel = new JLabel();
        processorListScrollPane = new JScrollPane();
        processorList = new JList<Processor>();
        nextButton = new JButton();
        stepsPanel = new JPanel();
        stepsTitle = new JLabel();
        step1 = new JLabel();
        step2 = new JLabel();
        heading = new JLabel();
        helpButton = new JButton();
        finishButton = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        backButton.setText("Back");
        backButton.setEnabled(false);
        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("Tests");

        testList.setModel(getTestListModel());
        testList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(final ListSelectionEvent evt) {
                testListValueChanged(evt);
            }
        });
        testListScrollPane.setViewportView(testList);

        buildTestListPanelLayout();

        processorLabel.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        processorLabel.setHorizontalAlignment(SwingConstants.CENTER);
        processorLabel.setText("Processors");

        processorList.setModel(getProcessorListModel());
        processorList.addListSelectionListener(
        		new ListSelectionListener() {
            public void valueChanged(
            		final ListSelectionEvent evt) {
                processorListValueChanged(evt);
            }
        });
        processorListScrollPane.setViewportView(processorList);

        buildProcessorListLayout();

        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        stepsPanel.setBackground(new java.awt.Color(255, 255, 255));

        stepsTitle.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        stepsTitle.setText("Steps");

        step1.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.STEP_FONT_SIZE)); // NOI18N
        step1.setText("1. Select Sources");

        step2.setText("2. Select Chart Split Type");

        buildStepsPanelLayout();

        heading.setFont(new java.awt.Font("Tahoma", 1, eesa.gui.Application.HEADING_FONT_SIZE)); // NOI18N
        heading.setText("Select Sources");

        helpButton.setText("Help");
        helpButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        finishButton.setText("Finish");
        finishButton.setEnabled(false);
        finishButton.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        buildLayout();

        pack();
    }
    /**
     * Builds the processor selection list's layout.
     */
    private void buildProcessorListLayout() {
    	GroupLayout processorListLayout = 
        		new GroupLayout(jPanel2);
        jPanel2.setLayout(processorListLayout);
        processorListLayout.setHorizontalGroup(
            processorListLayout.createParallelGroup(
            		GroupLayout.Alignment.LEADING)
            .addGroup(processorListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(processorListLayout.createParallelGroup(
                		GroupLayout.Alignment.LEADING)
                    .addComponent(processorLabel,
                    		GroupLayout.DEFAULT_SIZE,
                    		118,
                    		Short.MAX_VALUE)
                    .addComponent(processorListScrollPane,
                    		GroupLayout.PREFERRED_SIZE,
                    		0, Short.MAX_VALUE))
                .addContainerGap())
        );
        processorListLayout.setVerticalGroup(
            processorListLayout.createParallelGroup(
            		GroupLayout.Alignment.LEADING)
            .addGroup(processorListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processorLabel)
                .addPreferredGap(
                		LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processorListScrollPane,
                		GroupLayout.PREFERRED_SIZE,
                		85,
                		GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE,
                		Short.MAX_VALUE))
        );    	
    }
    /**
     * Builds the steps list layout.
     */
    private void buildStepsPanelLayout() {
        GroupLayout stepsPanelLayout = new GroupLayout(stepsPanel);
        stepsPanel.setLayout(stepsPanelLayout);
        stepsPanelLayout.setHorizontalGroup(
            stepsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stepsPanelLayout.createParallelGroup(
                		GroupLayout.Alignment.LEADING)
                    .addComponent(stepsTitle)
                    .addComponent(step2)
                    .addComponent(step1))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        stepsPanelLayout.setVerticalGroup(
            stepsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(stepsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stepsTitle)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(step2)
                .addContainerGap(196, Short.MAX_VALUE))
        );
    }
    /**
     * Builds the overall layout.
     */
    private void buildLayout() {
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(stepsPanel,
                		GroupLayout.PREFERRED_SIZE,
                		GroupLayout.DEFAULT_SIZE,
                		GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(
                		GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(heading)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1,
                        		GroupLayout.PREFERRED_SIZE,
                        		GroupLayout.DEFAULT_SIZE,
                        		GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jPanel2,
                        		GroupLayout.PREFERRED_SIZE,
                        		GroupLayout.DEFAULT_SIZE,
                        		GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(GroupLayout.Alignment.TRAILING,
            		layout.createSequentialGroup()
                .addContainerGap(195, Short.MAX_VALUE)
                .addComponent(backButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(finishButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(heading)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(
                		GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1,
                    		GroupLayout.DEFAULT_SIZE,
                    		GroupLayout.DEFAULT_SIZE,
                    		Short.MAX_VALUE)
                    .addComponent(jPanel2,
                    		GroupLayout.DEFAULT_SIZE,
                    		GroupLayout.DEFAULT_SIZE,
                    		Short.MAX_VALUE))
                .addPreferredGap(
                		LayoutStyle.ComponentPlacement.RELATED,
                		102, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(
                		GroupLayout.Alignment.BASELINE)
                    .addComponent(helpButton)
                    .addComponent(backButton)
                    .addComponent(nextButton)
                    .addComponent(finishButton)
                    .addComponent(cancelButton))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(stepsPanel,
                		GroupLayout.PREFERRED_SIZE,
                		GroupLayout.DEFAULT_SIZE,
                		GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }
    /**
     * Builds the test selection list's layout.
     */
    private void buildTestListPanelLayout() {
        GroupLayout testListPanelLayout = new GroupLayout(jPanel1);
        jPanel1.setLayout(testListPanelLayout);
        testListPanelLayout.setHorizontalGroup(
            testListPanelLayout.createParallelGroup(
            		GroupLayout.Alignment.LEADING)
            .addGroup(testListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(testListPanelLayout.createParallelGroup(
                		GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, 
                    		GroupLayout.DEFAULT_SIZE, 
                    		108,
                    		Short.MAX_VALUE)
                    .addComponent(testListScrollPane,
                    		GroupLayout.PREFERRED_SIZE,
                    		0,
                    		Short.MAX_VALUE))
                .addContainerGap())
        );
        testListPanelLayout.setVerticalGroup(
            testListPanelLayout.createParallelGroup(
            		GroupLayout.Alignment.LEADING)
            .addGroup(testListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(
                		LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testListScrollPane,
                		GroupLayout.PREFERRED_SIZE,
                		85,
                		GroupLayout.PREFERRED_SIZE)
                .addContainerGap(
                		GroupLayout.DEFAULT_SIZE,
                		Short.MAX_VALUE))
        );
	}
    /**
     * Reacts to the back button.
     * @param evt Click event
     */
	private void backButtonActionPerformed(final ActionEvent evt) {
        // Do Nothing
    }

    /**
     * Reacts to the cancel button.
     * @param evt Click event
     */
    private void cancelButtonActionPerformed(final ActionEvent evt) {
        setVisible(false);
        dispose();
    }

    /**
     * Reacts to changing the test list value.
     * @param evt List selection event
     */
    private void testListValueChanged(final ListSelectionEvent evt) {

    }

    /**
     * Reacts to the processor list value.
     * @param evt List selection event
     */
    private void processorListValueChanged(final ListSelectionEvent evt) {

    }

    /**
     * Reacts to the next button.
     * @param evt Click event
     */
    private void nextButtonActionPerformed(final ActionEvent evt) {
        updateData();
        new SplitExportSpeedChartWindow(data).setVisible(true);
    }

    /**
     * Reacts to the help button.
     * @param evt Click event
     */
    private void helpButtonActionPerformed(final ActionEvent evt) {

    }

    /**
     * Reacts to the finish button.
     * @param evt Click event
     */
    private void finishButtonActionPerformed(final ActionEvent evt) {
        // Do Nothing
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * Back button.
     */
    private JButton backButton;
    /**
     * Cancel button.
     */
    private JButton cancelButton;
    /**
     * Finish button.
     */
    private JButton finishButton;
    /**
     * Heading.
     */
    private JLabel heading;
    /**
     * Help button.
     */
    private JButton helpButton;
    /**
     * Empty label.
     */
    private JLabel jLabel1;
    /**
     * Panel.
     */
    private JPanel jPanel1;
    /**
     * Panel.
     */
    private JPanel jPanel2;
    /**
     * Next button.
     */
    private JButton nextButton;
    /**
     * Processor label.
     */
    private JLabel processorLabel;
    /**
     * Processor list.
     */
    private JList<Processor> processorList;
    /**
     * Processor list scroller.
     */
    private JScrollPane processorListScrollPane;
    /**
     * Step 1 label.
     */
    private JLabel step1;
    /**
     * Step 2 label.
     */
    private JLabel step2;
    /**
     * Steps panel.
     */
    private JPanel stepsPanel;
    /**
     * Steps title.
     */
    private JLabel stepsTitle;
    /**
     * Test selection list.
     */
    private JList<Test> testList;
    /**
     * Test selection list scroll pane.
     */
    private JScrollPane testListScrollPane;
    // End of variables declaration//GEN-END:variables
    /**
     * 
     */
    private void setInitialSelection() {
        List<Processor> processors = data.getProcessors();
        for (Processor p: processors) {
            processorList.setSelectedValue(p, false);
        }
        List<Test> tests = data.getTests();
        for (Test t: tests) {
            testList.setSelectedValue(t, false);
        }
    }
    /**
     * 
     */
    private void updateData() {
        if (data == null) {
        	data = new SpeedImageExport();
        }
        data.setProcessors(processorList.getSelectedValuesList());
        data.setTests(testList.getSelectedValuesList());
    }
    /**
     * 
     * @return List model
     */
    private ListModel<Test> getTestListModel() {
        if (tListModel == null) {
            tListModel = new TestListModel(
            		Simulator.getSimulator()
            		.getCurrentSimulation().getTestList());
        }
        return tListModel;
    }
    /**
     * 
     * @return List model
     */
    private ListModel<Processor> getProcessorListModel() {
        if (pListModel == null) {
            pListModel = new ProcessorListModel(
            		new ArrayList<Processor>(
            				Arrays.asList(Simulator.getSimulator().
            						getCurrentSimulation().getProcessors()))
                );
        }
        return pListModel;
    }
}
